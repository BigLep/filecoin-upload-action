name: "Filecoin Pin Upload"
description: "Pack site into a CAR, upload via filecoin-pin to Filecoin, and publish build artifacts."
branding:
  icon: upload-cloud
  color: blue

inputs:
  # Core configuration
  mode:
    description: "Action mode: 'build' (default, secure - compute CAR only, no secrets needed), 'upload' (upload from artifact, requires secrets), or 'all' (single-workflow, less secure for PRs)"
    required: false
    default: build
  path:
    description: Path to content to upload (file or directory). Typically your build output directory. Required for 'all' and 'build' modes.
    required: false
    default: dist
  walletPrivateKey:
    description: Wallet private key used to fund uploads (USDFC on Calibration/Mainnet). Required for 'all' and 'upload' modes, not needed for 'build' mode.
    required: false

  # Financial controls
  minDays:
    description: >-
      Minimum runway in days of funding to keep the current data set persisted on Filecoins.
      This ensures at least this much funds have been deposited to Filecoin Warm Storage.
      If there isn't, the necessary deposit will be attempted.
      If there are insufficient funds in the wallet, the action will fail.
      Only used in 'all' and 'upload' modes.
      SECURITY: When using two-workflow pattern, hardcode this in the upload workflow, not the build workflow.
    required: false
    default: "10"
  minBalance:
    description: >-
      Minimum deposit balance to maintain in Filecoin Pay (USDFC).
      Only used in 'all' and 'upload' modes.
      SECURITY: When using two-workflow pattern, hardcode this in the upload workflow.
    required: false
  maxTopUp:
    description: >-
      Maximum allowed additional deposit during this run (USDFC).
      Strongly recommended to cap PR spend.
      Only used in 'all' and 'upload' modes.
      SECURITY: When using two-workflow pattern, hardcode this in the upload workflow.
    required: false

  # Optional/Advanced configuration
  github_token:
    description: GitHub token for commenting and artifacts. Defaults to workflow token.
    required: false
  providerAddress:
    description: Optional override for storage provider address (on Calibration/Mainnet). Defaults to a known good provider on Calibration.
    required: false
    default: "0xa3971A7234a3379A1813d9867B531e7EeB20ae07"
  token:
    description: Payment token identifier. Currently only "USDFC" is supported; address override reserved for future.
    required: false
    default: "USDFC"
  withCDN:
    description: "If true, request CDN in the storage context (depends on provider capabilities). Warning: filecoin-pin does not calculate deposits and run-rate costs properly with CDN enabled."
    required: false
    default: "false"

  # Debugging/Testing only
  artifact_name:
    description: "Optional: Override artifact name for manual testing (e.g., with workflow_dispatch). Leave empty for auto-detection from workflow_run context."
    required: false
  build_run_id:
    description: "Optional: Build workflow run ID for manual testing. Only needed with workflow_dispatch - automatically detected from workflow_run context otherwise."
    required: false

outputs:
  ipfs_root_cid:
    description: IPFS Root CID
    value: ${{ steps.run.outputs.ipfs_root_cid }}
  data_set_id:
    description: Synapse Data Set ID
    value: ${{ steps.run.outputs.data_set_id }}
  piece_cid:
    description: Filecoin Piece CID
    value: ${{ steps.run.outputs.piece_cid }}
  provider_id:
    description: Storage Provider ID
    value: ${{ steps.run.outputs.provider_id }}
  provider_name:
    description: Storage Provider Name
    value: ${{ steps.run.outputs.provider_name }}
  car_path:
    description: Path to the created CAR file
    value: ${{ steps.run.outputs.car_path }}
  metadata_path:
    description: Path to JSON with upload metadata
    value: ${{ steps.run.outputs.metadata_path }}
  upload_status:
    description: Upload status (uploaded, reused-cache, reused-artifact, build-only)
    value: ${{ steps.run.outputs.upload_status }}
  artifact_name:
    description: Name of the build artifact (build mode only)
    value: ${{ steps.run.outputs.artifact_name }}

runs:
  using: "composite"
  steps:
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '24.x'

    - name: Get package-lock.json hash
      id: lockfile-hash
      shell: bash
      working-directory: ${{ github.action_path }}
      run: |
        if [ -f package-lock.json ]; then
          HASH=$(sha256sum package-lock.json | cut -d' ' -f1 | cut -c1-8)
          echo "hash=$HASH" >> $GITHUB_OUTPUT
        else
          echo "hash=none" >> $GITHUB_OUTPUT
        fi

    - name: Get action path
      id: action-path
      shell: bash
      run: |
        ACTION_PATH="${{ github.action_path }}"
        ACTION_PATH=$(cd "$ACTION_PATH" && pwd)
        echo "path=$ACTION_PATH" >> $GITHUB_OUTPUT

    - name: Restore action dependencies cache
      uses: actions/cache/restore@v4
      id: npm-cache
      with:
        path: ${{ steps.action-path.outputs.path }}/node_modules
        key: ${{ runner.os }}-filecoin-action-deps-${{ steps.lockfile-hash.outputs.hash }}
        restore-keys: |
          ${{ runner.os }}-filecoin-action-deps-

    - name: Install action deps
      if: ${{ steps.npm-cache.outputs.cache-hit != 'true' }}
      shell: bash
      working-directory: ${{ github.action_path }}
      run: npm ci --no-audit --no-fund

    - name: Save action dependencies cache
      if: ${{ always() && steps.npm-cache.outputs.cache-hit != 'true' }}
      uses: actions/cache/save@v4
      with:
        path: ${{ steps.action-path.outputs.path }}/node_modules
        key: ${{ runner.os }}-filecoin-action-deps-${{ steps.lockfile-hash.outputs.hash }}

    # Main execution - run.mjs handles everything based on mode
    - name: Run action
      id: run
      shell: bash
      working-directory: ${{ github.action_path }}
      env:
        INPUTS_JSON: ${{ toJson(inputs) }}
        GITHUB_TOKEN: ${{ inputs.github_token || github.token }}
      run: node src/run.mjs

    # Upload build artifacts (build mode only)
    - name: Upload build artifacts
      if: ${{ inputs.mode == 'build' && steps.run.outputs.artifact_name }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.run.outputs.artifact_name }}
        path: ${{ github.workspace }}/action-context
        retention-days: 1

    # Restore cache for reuse (upload/all modes only)
    - name: Restore upload cache
      if: ${{ (inputs.mode == 'upload' || inputs.mode == 'all') && steps.run.outputs.cache_key }}
      id: cache-restore
      uses: actions/cache/restore@v4
      with:
        key: ${{ steps.run.outputs.cache_key }}
        path: action-context

    # Save cache (upload/all modes only, on successful upload)
    - name: Save upload cache
      if: ${{ (inputs.mode == 'upload' || inputs.mode == 'all') && steps.run.outputs.cache_key && steps.run.outputs.upload_status == 'uploaded' }}
      uses: actions/cache/save@v4
      with:
        key: ${{ steps.run.outputs.cache_key }}
        path: action-context

    # Upload result artifacts (upload/all modes only)
    - name: Upload result artifacts
      if: ${{ (inputs.mode == 'upload' || inputs.mode == 'all') && steps.run.outputs.result_artifact_name }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.run.outputs.result_artifact_name }}
        path: |
          ${{ steps.run.outputs.car_path }}
          ${{ steps.run.outputs.metadata_path }}

