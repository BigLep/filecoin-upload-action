name: "Filecoin Pin Upload"
description: "Pack site into a CAR, upload via filecoin-pin to Filecoin, and publish build artifacts."
branding:
  icon: upload-cloud
  color: blue

inputs:
  # Core configuration
  mode:
    description: "Action mode: 'build' (default, secure - compute CAR only, no secrets needed), 'upload' (upload from artifact, requires secrets), or 'all' (single-workflow, less secure for PRs)"
    required: false
    default: build
  path:
    description: Path to content to upload (file or directory). Typically your build output directory. Required for 'all' and 'build' modes.
    required: false
    default: dist
  walletPrivateKey:
    description: Wallet private key used to fund uploads (USDFC on Calibration/Mainnet). Required for 'all' and 'upload' modes, not needed for 'build' mode.
    required: false

  # Financial controls
  minDays:
    description: >-
      Minimum runway in days of funding to keep the current data set persisted on Filecoins.
      This ensures at least this much funds have been deposited to Filecoin Warm Storage.
      If there isn't, the necessary deposit will be attempted.
      If there are insufficient funds in the wallet, the action will fail.
      Only used in 'all' and 'upload' modes.
      SECURITY: When using two-workflow pattern, hardcode this in the upload workflow, not the build workflow.
    required: false
    default: "10"
  minBalance:
    description: >-
      Minimum deposit balance to maintain in Filecoin Pay (USDFC).
      Only used in 'all' and 'upload' modes.
      SECURITY: When using two-workflow pattern, hardcode this in the upload workflow.
    required: false
  maxTopUp:
    description: >-
      Maximum allowed additional deposit during this run (USDFC).
      Strongly recommended to cap PR spend.
      Only used in 'all' and 'upload' modes.
      SECURITY: When using two-workflow pattern, hardcode this in the upload workflow.
    required: false

  # Optional/Advanced configuration
  github_token:
    description: GitHub token for commenting and artifacts. Defaults to workflow token.
    required: false
  providerAddress:
    description: Optional override for storage provider address (on Calibration/Mainnet). Defaults to a known good provider on Calibration.
    required: false
    default: "0xa3971A7234a3379A1813d9867B531e7EeB20ae07"
  token:
    description: Payment token identifier. Currently only "USDFC" is supported; address override reserved for future.
    required: false
    default: "USDFC"
  withCDN:
    description: "If true, request CDN in the storage context (depends on provider capabilities). Warning: filecoin-pin does not calculate deposits and run-rate costs properly with CDN enabled."
    required: false
    default: "false"

  # Debugging/Testing only
  artifact_name:
    description: "Optional: Override artifact name for manual testing (e.g., with workflow_dispatch). Leave empty for auto-detection from workflow_run context."
    required: false
  build_run_id:
    description: "Optional: Build workflow run ID for manual testing. Only needed with workflow_dispatch - automatically detected from workflow_run context otherwise."
    required: false

outputs:
  ipfs_root_cid:
    description: IPFS Root CID
    value: ${{ steps.compute.outputs.ipfs_root_cid || steps.run.outputs.ipfs_root_cid || steps.from-cache.outputs.ipfs_root_cid || steps.from-artifact.outputs.ipfs_root_cid }}
  data_set_id:
    description: Synapse Data Set ID
    value: ${{ steps.run.outputs.data_set_id || steps.from-cache.outputs.data_set_id || steps.from-artifact.outputs.data_set_id }}
  piece_cid:
    description: Filecoin Piece CID
    value: ${{ steps.run.outputs.piece_cid || steps.from-cache.outputs.piece_cid || steps.from-artifact.outputs.piece_cid }}
  provider_id:
    description: Storage Provider ID
    value: ${{ steps.run.outputs.provider_id || steps.from-cache.outputs.provider_id || steps.from-artifact.outputs.provider_id }}
  provider_name:
    description: Storage Provider Name
    value: ${{ steps.run.outputs.provider_name || steps.from-cache.outputs.provider_name || steps.from-artifact.outputs.provider_name }}
  car_path:
    description: Path to the created CAR file
    value: ${{ steps.compute.outputs.car_path || steps.run.outputs.car_path || steps.from-cache.outputs.car_path || steps.from-artifact.outputs.car_path }}
  metadata_path:
    description: Path to JSON with upload metadata
    value: ${{ steps.run.outputs.metadata_path || steps.from-cache.outputs.metadata_path || steps.from-artifact.outputs.metadata_path }}
  upload_status:
    description: Upload status (uploaded, reused-cache, reused-artifact, build-only)
    value: ${{ steps.run.outputs.upload_status || steps.from-cache.outputs.upload_status || steps.from-artifact.outputs.upload_status || (steps.compute.outputs.ipfs_root_cid && 'build-only') }}

runs:
  using: "composite"
  steps:
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '24.x'

    - name: Get package-lock.json hash
      id: lockfile-hash
      shell: bash
      working-directory: ${{ github.action_path }}
      run: |
        if [ -f package-lock.json ]; then
          HASH=$(sha256sum package-lock.json | cut -d' ' -f1 | cut -c1-8)
          echo "hash=$HASH" >> $GITHUB_OUTPUT
        else
          echo "hash=none" >> $GITHUB_OUTPUT
        fi

    - name: Get action path
      id: action-path
      shell: bash
      run: |
        # Normalize the action path to avoid ./ issues
        ACTION_PATH="${{ github.action_path }}"
        # Remove any trailing slashes and resolve
        ACTION_PATH=$(cd "$ACTION_PATH" && pwd)
        echo "path=$ACTION_PATH" >> $GITHUB_OUTPUT

    - name: Restore action dependencies cache
      uses: actions/cache/restore@v4
      id: npm-cache
      with:
        path: ${{ steps.action-path.outputs.path }}/node_modules
        key: ${{ runner.os }}-filecoin-action-deps-${{ steps.lockfile-hash.outputs.hash }}
        restore-keys: |
          ${{ runner.os }}-filecoin-action-deps-

    - name: Install action deps
      if: ${{ steps.npm-cache.outputs.cache-hit != 'true' }}
      shell: bash
      working-directory: ${{ github.action_path }}
      run: |
        npm ci --no-audit --no-fund

    - name: Save action dependencies cache
      if: ${{ always() && steps.npm-cache.outputs.cache-hit != 'true' }}
      uses: actions/cache/save@v4
      with:
        path: ${{ steps.action-path.outputs.path }}/node_modules
        key: ${{ runner.os }}-filecoin-action-deps-${{ steps.lockfile-hash.outputs.hash }}

    - name: Compute root + CAR
      id: compute
      if: ${{ inputs.mode == 'all' || inputs.mode == 'build' }}
      shell: bash
      working-directory: ${{ github.action_path }}
      env:
        INPUT_GITHUB_TOKEN: ${{ inputs.github_token }}
        INPUT_PRIVATEKEY: ${{ inputs.walletPrivateKey }}
        INPUT_PATH: ${{ inputs.path }}
        INPUT_MINDAYS: ${{ inputs.minDays }}
        INPUT_MINBALANCE: ${{ inputs.minBalance }}
        INPUT_MAXTOPUP: ${{ inputs.maxTopUp }}
        INPUT_WITHCDN: ${{ inputs.withCDN }}
        INPUT_TOKEN: ${{ inputs.token }}
        INPUT_PROVIDERADDRESS: ${{ inputs.providerAddress }}
        ACTION_PHASE: compute
      run: |
        node run.mjs

    # Auto-generate artifact name based on context
    - name: Set artifact name (build mode)
      if: ${{ inputs.mode == 'build' }}
      id: artifact-name
      shell: bash
      run: |
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          ARTIFACT_NAME="filecoin-build-pr-${{ github.event.pull_request.number }}"
        else
          ARTIFACT_NAME="filecoin-build-${{ github.run_id }}"
        fi
        echo "name=$ARTIFACT_NAME" >> $GITHUB_OUTPUT
        echo "::notice::Using artifact name: $ARTIFACT_NAME"

    - name: Save build artifacts (build mode only)
      if: ${{ inputs.mode == 'build' }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.artifact-name.outputs.name }}
        path: |
          ${{ steps.compute.outputs.car_path }}
        retention-days: 1

    # Save PR metadata automatically in build mode
    - name: Save PR metadata (build mode)
      if: ${{ inputs.mode == 'build' && github.event_name == 'pull_request' }}
      shell: bash
      run: |
        mkdir -p .filecoin-action-metadata
        cat > .filecoin-action-metadata/pr-metadata.json <<EOF
        {
          "number": ${{ github.event.pull_request.number }},
          "sha": "${{ github.event.pull_request.head.sha }}",
          "title": ${{ toJSON(github.event.pull_request.title) }},
          "author": "${{ github.event.pull_request.user.login }}",
          "artifact_name": "${{ steps.artifact-name.outputs.name }}"
        }
        EOF
        echo "::notice::Saved PR metadata for PR #${{ github.event.pull_request.number }}"

    - name: Upload PR metadata artifact (build mode)
      if: ${{ inputs.mode == 'build' && github.event_name == 'pull_request' }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.artifact-name.outputs.name }}-metadata
        path: .filecoin-action-metadata/pr-metadata.json
        retention-days: 1

    # Build mode complete (just a notice)
    - name: Build mode complete
      if: ${{ inputs.mode == 'build' }}
      shell: bash
      run: |
        echo "::notice::Build mode complete. CAR file created and saved to artifact."
        echo "::notice::IPFS Root CID: ${{ steps.compute.outputs.ipfs_root_cid }}"
        echo "::notice::Artifact name: ${{ steps.artifact-name.outputs.name }}"

    # Auto-detect artifact name in upload mode
    - name: Auto-detect artifact name (upload mode)
      if: ${{ inputs.mode == 'upload' }}
      id: upload-artifact-name
      shell: bash
      run: |
        # Use manual override if provided (for workflow_dispatch testing)
        if [ -n "${{ inputs.artifact_name }}" ]; then
          ARTIFACT_NAME="${{ inputs.artifact_name }}"
          echo "name=$ARTIFACT_NAME" >> $GITHUB_OUTPUT
          echo "::notice::Using manually provided artifact name: $ARTIFACT_NAME"
        elif [ -n "${{ github.event.workflow_run.pull_requests[0].number }}" ]; then
          # workflow_run with PR
          ARTIFACT_NAME="filecoin-build-pr-${{ github.event.workflow_run.pull_requests[0].number }}"
          echo "name=$ARTIFACT_NAME" >> $GITHUB_OUTPUT
          echo "::notice::Auto-detected artifact name from workflow_run PR: $ARTIFACT_NAME"
        elif [ -n "${{ github.event.workflow_run.id }}" ]; then
          # workflow_run without PR (push to main)
          ARTIFACT_NAME="filecoin-build-${{ github.event.workflow_run.id }}"
          echo "name=$ARTIFACT_NAME" >> $GITHUB_OUTPUT
          echo "::notice::Auto-detected artifact name from workflow_run: $ARTIFACT_NAME"
        else
          # Fallback for manual triggers without override
          ARTIFACT_NAME="filecoin-build-${{ github.run_id }}"
          echo "name=$ARTIFACT_NAME" >> $GITHUB_OUTPUT
          echo "::warning::No artifact_name provided and no workflow_run context. Using fallback: $ARTIFACT_NAME"
        fi

    # Download artifact if in upload mode
    - name: Download build artifact (upload mode)
      if: ${{ inputs.mode == 'upload' }}
      uses: actions/download-artifact@v4
      with:
        name: ${{ steps.upload-artifact-name.outputs.name }}
        run-id: ${{ inputs.build_run_id || github.event.workflow_run.id }}
        path: ./filecoin-build-restore

    # Download PR metadata if available (upload mode)
    - name: Download PR metadata (upload mode)
      if: ${{ inputs.mode == 'upload' }}
      continue-on-error: true
      uses: actions/download-artifact@v4
      with:
        name: ${{ steps.upload-artifact-name.outputs.name }}-metadata
        run-id: ${{ github.event.workflow_run.id }}
        path: ./filecoin-action-metadata

    # Auto-detect PR number from metadata
    - name: Auto-detect PR number (upload mode)
      if: ${{ inputs.mode == 'upload' }}
      id: auto-pr-number
      shell: bash
      run: |
        PR_NUM=""

        # Try to read from downloaded metadata
        if [ -f "./filecoin-action-metadata/pr-metadata.json" ]; then
          PR_NUM=$(jq -r '.number' ./filecoin-action-metadata/pr-metadata.json 2>/dev/null || echo "")
          if [ -n "$PR_NUM" ] && [ "$PR_NUM" != "null" ]; then
            echo "pr_number=$PR_NUM" >> $GITHUB_OUTPUT
            echo "::notice::Auto-detected PR number from metadata: $PR_NUM"
            exit 0
          fi
        fi

        # No PR metadata found - commenting will be skipped
        echo "::notice::No PR metadata found, PR commenting will be skipped"
        echo "pr_number=" >> $GITHUB_OUTPUT

    - name: Restore upload cache
      id: cache-restore
      if: ${{ inputs.mode == 'all' || inputs.mode == 'upload' }}
      uses: actions/cache/restore@v4
      with:
        key: filecoin-pin-v1-${{ steps.compute.outputs.ipfs_root_cid || steps.upload-artifact-name.outputs.name }}
        path: .filecoin-pin-cache/${{ steps.compute.outputs.ipfs_root_cid || steps.upload-artifact-name.outputs.name }}

    - name: Use cached metadata
      if: ${{ (inputs.mode == 'all' || inputs.mode == 'upload') && steps.cache-restore.outputs.cache-hit == 'true' }}
      id: from-cache
      shell: bash
      working-directory: ${{ github.action_path }}
      env:
        CACHE_DIR: ${{ github.workspace }}/.filecoin-pin-cache/${{ steps.compute.outputs.ipfs_root_cid }}
        INPUT_GITHUB_TOKEN: ${{ inputs.github_token }}
        INPUT_PRIVATEKEY: ${{ inputs.walletPrivateKey }}
        INPUT_MINDAYS: ${{ inputs.minDays }}
        INPUT_MINBALANCE: ${{ inputs.minBalance }}
        INPUT_MAXTOPUP: ${{ inputs.maxTopUp }}
        INPUT_WITHCDN: ${{ inputs.withCDN }}
        INPUT_TOKEN: ${{ inputs.token }}
        INPUT_PROVIDERADDRESS: ${{ inputs.providerAddress }}
        PREPARED_CAR_PATH: ${{ steps.compute.outputs.car_path }}
        PREPARED_ROOT_CID: ${{ steps.compute.outputs.ipfs_root_cid }}
        ACTION_PHASE: from-cache
      run: |
        node run.mjs

    - name: Find previous artifact by Root CID
      if: ${{ (inputs.mode == 'all' || inputs.mode == 'upload') && steps.cache-restore.outputs.cache-hit != 'true' }}
      id: find-artifact
      uses: actions/github-script@v7
      env:
        ROOT_CID: ${{ steps.compute.outputs.ipfs_root_cid }}
      with:
        github-token: ${{ inputs.github_token || github.token }}
        script: |
          const { owner, repo } = context.repo
          const ROOT_CID = process.env.ROOT_CID
          const targetName = `filecoin-pin-${ROOT_CID}`
          const items = await github.paginate(github.rest.actions.listArtifactsForRepo, { owner, repo, per_page: 100 })
          const found = items.find(a => a.name === targetName && !a.expired)
          if (found) {
            core.setOutput('artifact_id', String(found.id))
            core.setOutput('run_id', String(found.workflow_run?.id || ''))
          } else {
            core.setOutput('artifact_id', '')
            core.setOutput('run_id', '')
          }

    - name: Download previous artifact
      if: ${{ (inputs.mode == 'all' || inputs.mode == 'upload') && steps.cache-restore.outputs.cache-hit != 'true' && steps.find-artifact.outputs.artifact_id != '' }}
      uses: actions/download-artifact@v4
      with:
        name: filecoin-pin-${{ steps.compute.outputs.ipfs_root_cid }}
        run-id: ${{ steps.find-artifact.outputs.run_id }}
        path: filecoin-pin-artifacts-restore

    - name: Use artifact metadata
      if: ${{ (inputs.mode == 'all' || inputs.mode == 'upload') && steps.cache-restore.outputs.cache-hit != 'true' && steps.find-artifact.outputs.artifact_id != '' }}
      id: from-artifact
      shell: bash
      working-directory: ${{ github.action_path }}
      env:
        CACHE_DIR: ${{ github.workspace }}/filecoin-pin-artifacts-restore
        INPUT_GITHUB_TOKEN: ${{ inputs.github_token }}
        INPUT_PRIVATEKEY: ${{ inputs.walletPrivateKey }}
        INPUT_MINDAYS: ${{ inputs.minDays }}
        INPUT_MINBALANCE: ${{ inputs.minBalance }}
        INPUT_MAXTOPUP: ${{ inputs.maxTopUp }}
        INPUT_WITHCDN: ${{ inputs.withCDN }}
        INPUT_TOKEN: ${{ inputs.token }}
        INPUT_PROVIDERADDRESS: ${{ inputs.providerAddress }}
        FROM_ARTIFACT: "true"
        ACTION_PHASE: from-cache
      run: |
        node run.mjs

    - name: Upload via filecoin-pin
      if: ${{ (inputs.mode == 'all' || inputs.mode == 'upload') && steps.cache-restore.outputs.cache-hit != 'true' && steps.find-artifact.outputs.artifact_id == '' }}
      id: run
      shell: bash
      working-directory: ${{ github.action_path }}
      env:
        INPUT_GITHUB_TOKEN: ${{ inputs.github_token }}
        INPUT_PRIVATEKEY: ${{ inputs.walletPrivateKey }}
        INPUT_PATH: ${{ inputs.path }}
        INPUT_MINDAYS: ${{ inputs.minDays }}
        INPUT_MINBALANCE: ${{ inputs.minBalance }}
        INPUT_MAXTOPUP: ${{ inputs.maxTopUp }}
        INPUT_WITHCDN: ${{ inputs.withCDN }}
        INPUT_TOKEN: ${{ inputs.token }}
        INPUT_PROVIDERADDRESS: ${{ inputs.providerAddress }}
        ACTION_PHASE: upload
        PREPARED_CAR_PATH: ${{ steps.compute.outputs.car_path || './filecoin-build-restore/*.car' }}
        PREPARED_ROOT_CID: ${{ steps.compute.outputs.ipfs_root_cid }}
      run: |
        node run.mjs

    - name: Save upload cache
      if: ${{ (inputs.mode == 'all' || inputs.mode == 'upload') && steps.cache-restore.outputs.cache-hit != 'true' }}
      uses: actions/cache/save@v4
      with:
        key: filecoin-pin-v1-${{ steps.compute.outputs.ipfs_root_cid }}
        path: .filecoin-pin-cache/${{ steps.compute.outputs.ipfs_root_cid }}

    - name: Upload CAR + metadata artifacts
      if: ${{ (inputs.mode == 'all' || inputs.mode == 'upload') && (steps.run.outputs.car_path || steps.from-cache.outputs.car_path || steps.from-artifact.outputs.car_path) != '' }}
      uses: actions/upload-artifact@v4
      with:
        name: filecoin-pin-${{ steps.run.outputs.ipfs_root_cid || steps.from-cache.outputs.ipfs_root_cid || steps.from-artifact.outputs.ipfs_root_cid || steps.compute.outputs.ipfs_root_cid }}
        path: |
          ${{ steps.run.outputs.car_path || steps.from-cache.outputs.car_path || steps.from-artifact.outputs.car_path }}
          ${{ steps.run.outputs.metadata_path || steps.from-cache.outputs.metadata_path || steps.from-artifact.outputs.metadata_path }}

    - name: Comment on PR with IPFS Root CID
      if: ${{ (inputs.mode == 'all' || inputs.mode == 'upload') && (github.event_name == 'pull_request' || steps.auto-pr-number.outputs.pr_number != '') }}
      shell: bash
      working-directory: ${{ github.action_path }}
      run: node comment-pr.js
      env:
        IPFS_ROOT_CID: ${{ steps.run.outputs.ipfs_root_cid || steps.from-cache.outputs.ipfs_root_cid || steps.from-artifact.outputs.ipfs_root_cid }}
        DATA_SET_ID: ${{ steps.run.outputs.data_set_id || steps.from-cache.outputs.data_set_id || steps.from-artifact.outputs.data_set_id }}
        PIECE_CID: ${{ steps.run.outputs.piece_cid || steps.from-cache.outputs.piece_cid || steps.from-artifact.outputs.piece_cid }}
        UPLOAD_STATUS: ${{ steps.run.outputs.upload_status || steps.from-cache.outputs.upload_status || steps.from-artifact.outputs.upload_status }}
        PR_NUMBER: ${{ steps.auto-pr-number.outputs.pr_number || github.event.pull_request.number }}
        GITHUB_TOKEN: ${{ inputs.github_token || github.token }}
        GITHUB_REPOSITORY: ${{ github.repository }}
